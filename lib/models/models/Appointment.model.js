const mongoose = require('mongoose'),
    Schema = mongoose.Schema,
    ObjectId = mongoose.Types.ObjectId,
    { PaymentStatus } = require('../enums');

const { Appointments, Common, Users,CallStatus } = require('../enums');
const AppointmentSchema = new Schema({
    organizationId: {
        type: Schema.Types.ObjectId,
        ref: 'Organization'
    },
    appointmentId: {
        type: Number,
        default: 1
    },
    doctor: {
        type: ObjectId,
        ref: 'User',
        required: true,
    },
    consultant: {
        type: ObjectId,
        ref: 'User',
        required: true,
    },
    isSuspended: {
        type: Boolean,
        default: false,
    },
    isDeleted: {
        type: Boolean,
        default: false,
    },
    isCanceled: {
        type: Boolean,
        default: false,
    },
    countryName: {
        type: String,
        trim: true
    },
    patient: {
        fullName: {
            type: String,
            trim: true,
            required: false,
        },
        dob: {
            type: Date,
            trim: true
        },
        age: {
            type: Number,
            trim: true
        },
        gender: {
            type: String,
            trim: true
        },
        reason: {
            type: String,
            trim: true
        },
        documents: [{
            fileName: {
                type: String,
                trim: true
            },
            documentName: {
                type: String,
                trim: true
            },
            date: {
                type: Date
            }
        }],
        doctorVoiceNote: [{
            fileName: {
                type: String,
                trim: true
            },
            documentName: {
                type: String,
                trim: true
            },
            date: {
                type: Date
            }
        }],
        consultantVoiceNote: [{
            fileName: {
                type: String,
                trim: true
            },
            documentName: {
                type: String,
                trim: true
            },
            date: {
                type: Date
            }
        }],
        prescriptions: [{
            fileName: {
                type: String,
                trim: true
            },
            documentName: {
                type: String,
                trim: true
            },
            date: {
                type: Date
            }
        }],
        consultDescription:[{
            description:{
                type: String,
                trim: true
            },
            date: {
                type: Date
            }
        }]
    },
    bookingDetails: {
        slotId: {
            type: ObjectId,
            ref: 'Slot',
        },
        date: {
            type: Date,
            required: true
        },
        slots: [{
            isBooked: {
                type: Boolean,
                default: false,
            },
            bookingId: {
                type: String,
                trim: true,
            },
            slotTime: {
                type: String,
                trim: true,
                required: true
            },
            utcTime: {
                type: Date,
                trim: true,
            },
        }],
        mode: {
            type: String,
            trim: true,
            required: true
        },
        gst: {
            type: Number,
            trim: true,
            required: true
        },
        adminFlatFee: {
            type: Number,
            trim: true,
            required: true
        },
        totalPayable: {
            type: Number,
            trim: true,
            required: true
        },
        amount: {
            type: Number,
            trim: true,
            required: true
        },
    },
    offset: {
        type: String, default: "0"
    },
    orderId: {
        type: String,
        trim: true
    },
    isWallet: {
        type: Boolean,default: false
    },
    walletAmount: {
        type: Number
    },
    isWalletUpdate: { //prevent refresh page
        type: Boolean,default: false
    },
    paymentMethod: {
        type: String,
        default: ""
    },
    paymentId: {
        type: ObjectId,
        ref: 'Payment'
    },
    consultantFee: {
        type: Number
    },
    paymentStatus: {
        type: String,
        enum: Object.keys(PaymentStatus),
        default: 'PENDING'
    },
    /**twilio call *****/
    room_sid: {
        type: String
    },
    // room name for video call generated by us
    room_name: {
        type: String
    },
    //for audio call
    call_sid: {
        type: String
    },
    parent_call_sid: {
        type: String
    },
    participants_connected: [{
        type: ObjectId,
        ref: 'User'
    }],
    call_status: {
        type: Number,
        enum: Object.values(Appointments.CallStatus),
        default: 4
    },
    call_history:[{
        call_sid: {
            type: String
        },
        parent_call_sid: {
            type: String
        },
        call_status: {
            type: Number,
            enum: Object.values(Appointments.CallStatus),
            default: 4
        },
        date: {
            type: Date,
            default: new Date()
        },
        CallDuration: {
            type: Number,
            default: 0
        }
    }],
    notification_send_flag: {
        type: Number,
        enum: Object.values(Common),
        default: 0
    },
    uniqueName: {
        type: String,
        default: null
    },
    call_unique_name: {
        type: String,
        default: null
    },
    call_slots: [
        new Schema({
            from: {
                type: Date
            },
            to: {
                type: Date
            }
        }, {
            id: false,
            toJSON: { getters: true },
            toObject: { getters: true }
        })
    ],
    isRefund:{
        type: Boolean,
        default: false
    },
    isEmergency: {
        type: Boolean,
        default: false,
    }
}, {
    timestamps: {
        createdAt: 'created',
        updatedAt: 'updated',
    },
    id: false,
    toJSON: {
        getters: true,
    },
    toObject: {
        getters: true,
    },
});

module.exports = mongoose.model('Appointment', AppointmentSchema);
